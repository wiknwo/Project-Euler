'''Problem 12 
    
    William Ikenna-Nwosu (wiknwo)

    The sequence of triangle numbers is generated by adding 
    the natural numbers. So the 7th triangle number would be 
    1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would 
    be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle 
    numbers:

    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have 
    over five divisors.

    What is the value of the first triangle number to have 
    over five hundred divisors?
'''
import math

def generate_triangular_number(number):
    '''Function to generate the nth triangular number

    Args:
        number(int): number

    Raises:

    Return:
        triangular_number
    '''
    return number * (number + 1) / 2

def count_divisors(number):
    '''Function to count the number of divisors a number has

    Args:
        number(int): number

    Raises:

    Return:
        number_of_divisors
    '''
    number_of_divisors = 0
    for i in range(1, int(math.sqrt(number)) + 1):
        if number % i == 0:
            if number / i == i:
                number_of_divisors += 1
            else:
                number_of_divisors += 2
    return number_of_divisors

    # Reducing number of computations
    # Improving time complexity
def main():
    number_of_divisors = 0
    triangular_number = -1
    count = 1

    while number_of_divisors <= 500:
        triangular_number = generate_triangular_number(count)
        triangular_number = int(triangular_number)
        number_of_divisors = count_divisors(triangular_number)
        count = count + 1
    print('The triangular number is {}'.format(triangular_number))


if __name__ == '__main__':
    main()